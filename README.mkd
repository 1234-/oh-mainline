Thanks for checking out our repository. We love this project, hope you do too.

Well, you probably want to know to how run this code.

## How to run this code ##

### Dependencies ###

OpenHatch is currently designed to run on Debian testing, Python 2.6. Make sure that's installed.

Next, install some dependencies. This is what we do on Debian testing/unstable:

    sudo apt-get install python2.6-dev python-libxml2 memcached

Or the equivalent for your system. (It's important that you get Python 2.6 -- some of the OpenHatch code depends on Python 2.6 or higher.)

Debian stable does not currently (Sept 1 2010) have the necessary packages, you must either run Debian testing/unstable or use apt-pinning.  See below for how to install on Debian stable.

On some Operating Systems you may not need (or be able) to install all of the above packages, depending on what comes prebuilt with Python as default. If you do find a package for any of the above for your system, you should install it.
On a Debian system using the 'stable' release, you have to setup apt-pinning to be able to install packages from 'unstable' and 'testing' as well to get _python2.6-dev_.
<http://jaqque.sbih.org/kplug/apt-pinning.html>

The other dependencies (like Django) are handled by "buildout", so keep reading patiently and we'll get to that.

### Caching ###

Now start memcached. This is used by Django for all the website caching, such as the full list of projects, as well as individual webpage requests.

    sudo /etc/init.d/memcached start

If memcached complains that it is not enabled, configure it by reading `/etc/default/memcached`.

### Run Buildout ###

OpenHatch uses Buildout to manage dependencies.

Run these commands from the top level directory of the repository, and grab some coffee, snacks, or both. This may take awhile.

    python2.6 bootstrap.py
    bin/buildout


### Set up the database ###

Connect to MySQL. At the risk of stating the obvious, you can use the command `mysql -u root -p`, then type your MySQL root password. Or use `mysql -u username`, where `username` belongs to a MySQL user with the power to run the commands below.

At the MySQL prompt, enter these commands:

    CREATE DATABASE oh_milestone_a;
    CREATE USER 'oh_milestone_a'@'localhost' IDENTIFIED BY 'ahmaC0Th';
    GRANT ALL ON oh_milestone_a.* TO 'oh_milestone_a'@'localhost';

In addition, if you wish to run any of the tests, you will need to grant permissions for the temporary database as well:

    GRANT ALL ON test_oh_milestone_a.* TO 'oh_milestone_a'@'localhost';

There is no need to create this database, as creation and destruction is done automatically by the testing suite.

Then exit from MySQL, and run this command, again from the top level directory:

    bin/mysite syncdb

To the question, "Do you want to create a superuser?", answer "No". That's because you haven't run the migrations for the "profile" app yet.

You may need to migrate using this command:

    bin/mysite migrate

There's a note about troubleshooting migrations below.

If you have the permission to do so, get the current data and files. Run:

    scripts/get_data_and_images

### Run the server ###

The following command will start the OpenHatch webserver:

    bin/mysite runserver

This server really doesn't like running in the background, so run it in a separate tab or inside a GNU screen session.
If everything went well and the server started you should see something like this

    Django version 1.1.2, using settings 'mysite.settings'
    Development server is running at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

### Check it all works ###

Now load <http://localhost:8000/> in your web browser. If you see a familiar-looking page then congratulations! You now have your own personal OpenHatch server to hack away at!

To run the server on an IP other than loopback, use the syntax

    bin/mysite runserver IP:PORT

where IP and PORT are what IP and port you want the server to run on.  This and more info is available with

    bin/mysite runserver --help


If you're having troubles at this point, see "Troubleshooting" below, or post your question to #openhatch on irc.freenode.net.

### About migrations ###

Sometimes the migrations don't work, and South will give you a MySQL script so you can fix things. But South isn't perfect. You might have to fix the syntax errors in this MySQL. For starters, you can run this vim command in normal mode, it will delete the string ' = ' when it appears at the beginning of a new line.

    :%s/^ = //

Then remove those trailing square brackets. You may need to replace South's strange, Pythonesque code for dates, with proper MySQL code.

## To make the profile importer work ##

Profile importing is done using the Celery daemon. Run it using the following command:

    bin/mysite celeryd -c 8

As with the main server, it is a good idea to run this in a separate tab or inside a GNU screen session, rather than in the background.

## To make the bug importer work ##

At present, there is no inbuilt automation of bug importing (celeryd was causing too many problems). Run the following command to start a bug import:

    bin/mysite search_daily_tasks

Since this can take a while, it is a good idea to run this somewhere where it won't prevent you from using your computer - for example, inside a GNU screen session.

## To make the svn missions work ##

Subversion repositories for the svn training missions are stored in mysite/missions-userdata/svn. This directory must be available via svnserve for users to be able to do the svn missions.  See mysite/missions-userdata/svn/README for more details.

## Testing ##

As you make changes to the source code, you'll want to run unit tests to make sure that everything is still hunky-dory. To run all tests, except the rather slow tests in the `customs` app, run this command:

    bin/test_sans_customs

To run the tests in the `customs` app:

    bin/mysite test customs

## To forcibly regenerate scripts in bin/* ##

*Why would we need to do this?*

Run these commands:

    cd milestone-a # Make sure you're in this directory. I'm not sure if it will work elsewhere.
    python bootstrap.py
    bin/buildout -o # The o flag is for "offline", so you don't hit the network looking for dependencies

## Geography data ##

This product includes GeoLite data created by MaxMind, available from http://www.maxmind.com/.

This data is automatically downloaded by buildout. In theory we/you should re-download the database every month, when MaxMind does a refresh. To do so, run these commands from the top level directory of the repository:

    rm -rf parts/download_geocoding_db # Remove our cached copy
    bin/buildout # If there's no cached copy, buildout will automatically download the file

## People search ##

We have a map at <http://localhost:8000/people/>. To accelerate search on those people, we use
Haystack, a Django layer on top of search engines. In our case, we use the
search engine called Solr.

### Understanding indexes and the Solr schema file ###

We have a hand-tuned Solr schema that lives in `mysite/config-files/schema.xml`.
This file was first generated using the Haystack command to auto-generate a
schema from our `mysite/profile/search_indexes.py` file, but since then we have adjusted
it ourselves.

Unfortunately, this means that if you add or modify those indexes, you should
NOT just regenerate the schema file automatically. Instead, merge it by hand by
adding just the elements you need. If you have trouble with that, ask Asheesh.

### Running the Solr server (development) ###

For people search to work, you must run the Solr server. On a development machine
(e.g., laptop), do this:

    cd mysite
    scripts/run_solr.sh

### Running the Solr server (production) ###

Steps:

1. Copy the schema into place.

2. Run SOLR with a config file that points at that schema.

### Initialize its index ###

Start in milestone-a, then run this command:

    bin/mysite rebuild_index

(say yes)

### Other maintenance tasks ###

#### Run the hourly tasks related to profiles ####

There's a management command that runs necessary maintenance tasks. At time of writing, it tries to keep our cache of recommended bugs more or less up to date with the state of the bug table in our database.

To run this maintenance task hourly, run these commands:

    # The following use of GNU screen is helpful for running maintenance tasks,
    # but is not necessary.
    screen -RD # Create an instance of screen, or attach to an existing one. 
    # Type Ctrl-a, c to open a new screen
    while (true); do ./bin/mysite profile_hourly_tasks; sleep 1h; done
    # Type Ctrl-a, d to hide ("detach from") the screen

### Troubleshooting ###

#### MySQL_python ####

If you're on Ubuntu 10.04 Lucid Lynx, you might get this sort of exception:

  File "/home/stump/openhatch/parts/sqlite_mysite/django/db/backends/mysql/base.py", line 13, in <module>
    raise ImproperlyConfigured("Error loading MySQLdb module: %s" % e)
django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: libmysqlclient_r.so.15: cannot open shared object file: No such file or directory

This is because the MySQL_python distribution is a binary egg that
contains extension modules linked to libmysqlclient_r.so.15, while in
Lucid the soname version number changed to 16.  To fix this, simply install
a compatibility package provided by your distribution. For Ubuntu and Debian:

   $ sudo apt-get install libmysqlclient15off

Thanks to http://meta.osqa.net/questions/2204/ubuntu-1004-problem-with-missing-libmysqlclient_rso15
for this hint.

An earlier version of this document said to remove the egg from your filesystem. You
should not do that, but instead add the compatibility package listed above.

#### Clearing the cache ####

As an aside, the Django cache is held completely in temporary memory by memcached, so clearing the cache is as simple as:

    sudo /etc/init.d/memcached restart

#### ctypes ####
* If you're running Ubuntu 10.04 Lucid Lynx, when you execute `bin/mysite runserver`, you might see this error:
  File "/usr/lib/python2.6/dist-packages/ctypes/__init__.py", line 20, in <module>
    raise Exception, ("Version number mismatch", __version__, _ctypes_version)
Exception: ('Version number mismatch', '1.0.2', '1.1.0')

Here's one person's solution: "The problem can be solved by removing the python-ctypes package, which, it seems, is obsolete in Lucid and was left over from earlier versions." <https://bugs.launchpad.net/caffeine/+bug/560636>. (Note that you might see different version numbers than the ones above.) To remove the package, try `sudo apt-get remove python-ctypes`.

### Adding jQuery UI components ###

When you want to add a jQuery UI component, go here:

    http://jqueryui.com/download

Select the following options, plus yours:

* Sortable
* Accordion
* Tabs
* Progressbar

Note that the site will automatically select any dependencies (like jQuery UI's "Core").

First, under "Theme", select "No Theme". Under "Version", select "1.7.2 (stable release, for jQuery 1.3.2). Then click your little cartoon hand on the Download button.

Unzip the file in /tmp/, and just extract the file js/jquery-ui-1.7.2.custom.min.js, and cp it to mysite/static/js/. That will overwrite the existing jQuery UI bundle.

Be sure to check using git diff that the change you've introduced in git's view of that file is exactly what you expect.

Finally, don't forget to add your component to the list above, so the next person does the right thing.

## Thanks to ##

* The Free Software projects that we depend on &mdash; see `buildout.cfg` for a list.
* Our contributors and consultants are listed at <http://openhatch.org/+projects/OpenHatch>. If you've helped to create OpenHatch, you deserve to be listed there!
* The fantastic people who have helped us:
    * [Nelson Pavlosky](http://skyfaller.net)
    * [Shotput Ventures](http://shotputventures.com), who mentored and funded us in the summer of 2009.
    * The [Institute for Security, Technology, and Society](http://ists.dartmouth.edu) and the [Neukom Institute](http://dartmouth.edu/neukom), both at Dartmouth, who sponsored [Parker](http://madebyparker.com) [Phinney](http://openhatch.org/people/pyrak)'s internship during the Dartmouth winter 2010 term.
    * [Google Summer of Code](http://code.google.com/soc/), who are sponsoring [John](http://jstump.com) [Stumpo](http://openhatch.org/people/stump)'s internship during the summer of 2010.

## Stay in touch ##

&hellip;on [the project blog](http://openhatch.org/blog), [Identi.ca](http://identi.ca/openhatchery), [Twitter](http://twitter.com/openhatchery), IRC (#openhatch on irc.freenode.net), and the [Face-Book](http://facebook.com/pages/OpenHatch/108578243652).

